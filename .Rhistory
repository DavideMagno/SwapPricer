tibble::is_tibble(swap_standard)
purrr::transpose(Swaps_basket)
B <- purrr::transpose(Swaps_basket)
View(B)
purrr::compact(B[[1]])
?purrr::compact
purrr::compact(B[[1]], ~is.na)
B[[1]]$time.unit.receive
is.na(B[[1]]$time.unit.receive)
purrr::discard(B[[1]], is.na)
?purrr::discard
list(a = "a", b = NULL, c = integer(0), d = NA, e = list()) %>%
purrr::compact()
B[[2]]
B[[2]] %>% purrr::discard(c("dcc.pay", "dcc.receive"))
purrr::discard(B[[2]], c("dcc.pay", "dcc.receive"))
purrr::discard(B[[2]], "dcc.receive")
library(magrittr)
x <- rerun(5, a = rbernoulli(1), b = sample(10))
View(swap_standard)
swap_standard %>% purrr::discard("standard")
swap_standard %>% purrr::discard(vars("standard"))
swap_standard %>% purrr::discard(dplyr::vars("standard"))
C <- names(B[[2]])
C
library(stringr)
str_view(C, [pay])
str_view(C, "[pay]")
str_view(C, "pay")
str_view(C, "receive")
purrr::keep(B[[2]], ~str_detect("pay"))
purrr::keep(B[[2]], ~str_detect(., "pay"))
rlang::last_error()
purrr::keep(B[[2]], ~str_extract(.x, "pay"))
str_extract(B[[2]], "pay")
swap_standard %>% dplyr::mutate(davide = 2)
B
Swaps_basket
purrr::detect(B[[2]], ~str_extract(.x, "pay") == TRUE)
?purrr::detect
3:10 %>% purrr::detect(is_even)
B[[2]][paste0("type.","pay")]
library(SwapPricer)
library(SwapPricer)
library(SwapPricer)
View(swap_standard)
View(Swaps_basket)
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
SwapPortfolioFormatting(Swaps_basket)
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
SwapPortfolioFormatting(Swaps_basket)
swap.portfolio
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
swap.portfolio
swap.portfolio$type.pay
swap.portfolio
swap.portfolio$standard
swap.portfolio %<>%
purrr::discard(is.na)
swap.portfolio
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
Swaps_basket %>%
purrr::transpose() %>%
purrr::map(SwapPortfolioFormatting)
swap.portfolio
swap.portfolio %>%
purrr::discard(is.na)
B <- Swaps_basket %>%
purrr::transpose()
purrr::discard(B[[2]], is.na)
B[[2]] %>% purrr::discard(is.na)
SwapPortfolioFormatting(B)
swap.portfolio
map(B, SwapPortfolioFormatting)
purrr::map(B, SwapPortfolioFormatting)
swap.portfolio
swap.portfolio %>%
purrr::discard(is.na)
swap.portfolio
purrr::map(B, SwapPortfolioFormatting)
swap.portfolio %>%
purrr::discard(is.na)
source('~/Documents/R/Pricingverse/SwapPricer/R/Data_formatting.R', echo=TRUE)
purrr::map(B, SwapPortfolioFormatting)
swap.portfolio
swap.structure
swap.standard <- tibble(currency = c("EUR","EUR"), leg = c("fixed", "floating"), time.unit = c(12, 6), dcc = c(6, 0), calendar = c("TARGET", "TARGET"))
swap.standard <- tibble::tibble(currency = c("EUR","EUR"), leg = c("fixed", "floating"), time.unit = c(12, 6), dcc = c(6, 0), calendar = c("TARGET", "TARGET"))
swap.standard
use_data(swap.standard)
load("~/Documents/R/Pricingverse/SwapPricer/data/swap.standard.rda")
devtools::document()
library(SwapPricer)
SwapPortfolioFormatting(B)
SwapPortfolioFormatting(B)
B
SwapPortfolioFormatting(B[[1]])
swap.tabular
swap.tabular$start.date
swap.standard
swap.standard %>%
dplyr::filter(currency = swap.tabular$currency,
leg = swap.tabular[paste0("type.",leg)])
swap.tabular$currency
swap.tabular
swap.standard %>% dplyr::mutate(currency = "EUR")
library(readr)
Swaps_basket <- read_csv("data/Basket of IRS/Swaps_basket.csv")
View(Swaps_basket)
library(readr)
ir_curve <- read_csv("data/Basket of IRS/Curve at 140419.csv")
View(ir_curve)
swaps.basket <- swaps.basket
View(Swaps_basket)
library(dplyr)
Swaps_basket %>% mutate_at(.vars = vars(start.date, maturity.date), .funs = lubridate::as_date)
Swaps_basket %>% mutate_at(.vars = vars(start.date, maturity.date), .funs = lubridate::dmy)
Swaps_basket %<>% mutate_at(.vars = vars(start.date, maturity.date), .funs = lubridate::dmy)
use_data(Swaps_basket, ir_curve)
library(SwapPricer)
SwapPricer::Swaps_basket
use_vignette("Pricing_basket_swaps")
SwapPricer::Swaps_basket
library(SwapPricer)
library(SwapPricer)
today <- lubridate::ymd(20190414)
df.table <- SwapPricer::ir_curve %>%
dplyr::mutate(`Maturity Date` = lubridate::mdy(`Maturity Date`)) %>%
dplyr::rowwise(.) %>%
dplyr::mutate(t2m = RQuantLib::yearFraction(today, `Maturity Date`, 6)) %>%
na.omit %>%
dplyr::select(t2m, Discount) %>%
dplyr::rename(df = Discount) %>%
dplyr::ungroup(.) %>%
dplyr::bind_rows(c(t2m = 0,df = 1)) %>%
dplyr::arrange(t2m)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio %>%
# insert a control on how to manage non European dates
dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
.funs = lubridate::dmy)
swap.portfolio %<>%
# insert a control on how to manage non European dates
dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
.funs = lubridate::dmy)
swap.portfolio
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio %>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose()
swap.tabular
swap.tabular
swap.tabular
swap.tabular
variable
swap.standard %>%
dplyr::filter(currency = swap.tabular$currency)
swap.standard
swap.tabular
swap.tabular$currency
swap.standard %>%
dplyr::filter(currency == swap.tabular$currency
)
swap.standard %>%
dplyr::filter(leg == swap.tabular[paste0("type.",leg)])
swap.standard
paste0("type.",leg)
swap.tabular
swap.tabular[paste0("type.",leg)]
swap.standard
swap.standard[2,2]
leg
swap.tabular[paste0("type.",leg)]
swap.tabular[paste0("type.",leg)] == swap.standard[2,2]
swap.standard %>%
dplyr::filter(currency == swap.tabular$currency) %>% dplyr::select(!!rlang::quo(variable))
swap.standard %>%
dplyr::filter(leg == swap.tabular[paste0("type.",leg)]) %>%
dplyr::select(!!rlang::quo(variable))
swap.standard %>%
dplyr::filter(leg == unlist(swap.tabular[paste0("type.",leg)])) %>%
dplyr::select(!!rlang::quo(variable))
swap.standard %>%
dplyr::filter(leg == unlist(swap.tabular[paste0("type.",leg)]))
unlist(swap.tabular[paste0("type.",leg)])
unname(unlist(swap.tabular[paste0("type.",leg)]))
swap.standard %>%
dplyr::filter(leg == unname(unlist(swap.tabular[paste0("type.",leg)])))
swap.standard %>%
dplyr::filter(currency = swap.tabular$currency,
leg = swap.tabular[paste0("type.",leg)]) %>%
dplyr::select(!!rlang::quo(variable))
swap.standard
swap.standard %>%
dplyr::filter(grepll(swap.tabular[paste0("type.",leg)],leg))
swap.standard %>%
dplyr::filter(grepl(swap.tabular[paste0("type.",leg)],leg))
swap.tabular[paste0("type.",leg)] %>% as.character()
swap.standard %>%
dplyr::filter(grepl(swap.tabular[paste0("type.",leg)] %>% as.character(),leg))
?grepl
swap.tabular[paste0("type.",leg)] %>% as.character()
swap.standard$leg
grepl(swap.tabular[paste0("type.",leg)] %>% as.character(), swap.standard$leg)
swap.standard %>% filter(grepl(swap.tabular[paste0("type.",leg)] %>% as.character(), swap.standard$leg))
A <- swap.tabular[paste0("type.",leg)] %>% as.character()
swap.standard %>% dplyr::filter(grepl(A, leg))
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.standard %>%
dplyr::filter(grepl(swap.tabular$currency, currency),
grepl(swap.leg, leg))
swap.standard %>%
dplyr::filter(grepl(swap.tabular$currency, currency),
grepl(swap.leg, leg)) %>%
dplyr::select(!!rlang::quo(variable))
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(A)
purrr::flatten(A)
purrr::transpose(A)
purrr::transpose(A) %>% purrr::flatten()
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular
swap.tabular$time.unit
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.) %>%
purrr::flatten(.)
A <- list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.) %>%
purrr::flatten(.)
A
View(A)
View(A)
A$pay
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
library(SwapPricer)
browser()
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
swap.tabular %>%
purrr::discard(~str_extract(.x, "pay") == TRUE)
swap.tabular
swap.tabular
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
swap.tabular %>%
purrr::discard(~str_extract(.x, "pay") == TRUE) %>%
purrr::discard(~str_extract(.x, "receive") == TRUE) %>%
purrr::discard(~str_extract(.x, "standard") == TRUE)
purrr::discard(swap.tabular, ~str_extract(.x, "pay") == TRUE)
purrr::discard(swap.tabular, ~stringr::str_extract(.x, "pay") == TRUE)
purrr::discard(swap.tabular, ~stringr::str_extract(.x, "pay") == TRUE)
stringr::str_extract(swap.tabular, "pay")
View(swap.tabular)
stringr::str_extract(names(swap.tabular), "pay")
stringr::str_detect(names(swap.tabular), "pay")
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular %>%
purrr::discard(~stringr::str_detect(names(.x), "pay") == TRUE)
stringr::str_detect(names(swap.tabular), "pay")
stringr::str_detect(names(swap.tabular), c("pay", "receive", "standard"))
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular %>%
purrr::discard(~stringr::str_detect(names(.x),
c("pay", "receive", "standard")) == TRUE)
stringr::str_detect(names(swap.tabular),c("pay", "receive", "standard"))
purrr::discard(swap.tabular, stringr::str_detect(names(swap.tabular),c("pay", "receive", "standard")))
swap.tabular %>% purrr::discard(stringr::str_detect(names(.),c("pay", "receive", "standard")))
library(SwapPricer)
B[[1]]
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
names(swap.portfolio)
swap.portfolio %<>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose()
names(swap.portfolio)
map(swap.portfolio, "ID")
flatten(map(swap.portfolio, "ID"))
purrr::flatten(map(swap.portfolio, "ID"))
(map(swap.portfolio, "ID")) %>% as.double()
(map(swap.portfolio, "ID")) %>% as.vector()
(map(swap.portfolio, "ID")) %>% as.array()
swap.portfolio %>% set_names(map(swap.portfolio, "ID"))
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
stringr::str_detect(names(swap.tabular), remove.elements)
remove.elements
library(SwapPricer)
R CMD check
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular %>%
purrr::discard(~stringr::str_detect(names(.),
c("pay", "receive", "standard", "ID")) == TRUE)
swap.tabular %>%
purrr::discard(~stringr::str_detect(names(.), "pay") == TRUE)
stringr::str_detect(names(swap.tabular), "pay")
purrr::discard(swap.tabular, stringr::str_detect(names(swap.tabular), "pay") == TRUE)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular
View(swap.tabular)
View(swap.tabular)
names(swap.tabular)
purrr::discard(swap.tabular, stringr::str_detect(names(swap.tabular), discard.entries) == TRUE)
stringr::str_detect(names(swap.tabular), discard.entries)
map(discard.entries, ~stringr::str_detect(names(swap.tabular), .x))
stringr::str_extract(names(swap.tabular), "pay")
stringr::str_extract(names(swap.tabular), discard.entries)
discard.entries %in% names(swap.tabular)
names(swap.tabular) %in% discard.entries
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
View(swap.tabular)
swap.standard
swap.standard %<>% select(-calendar)
swap.standard
swap.standard.calendar <- tibble(currency = "EUR", calendar = "TARGET")
use_data(c("swap_standard", "swap.standard.calendar"))
use_data(swap.standard, swap.standard.calendar)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.tabular)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.standard.calendar
swap.tabular$currency
swap.standard.calendar %>%
dplyr::filter(grepl(swap.tabular$currency, currency))
swap.standard.calendar %>%
dplyr::filter(grepl(swap.tabular$currency, currency)) %>%
dplyr::select(calendar)
swap.standard.calendar %>%
dplyr::filter(grepl(swap.tabular$currency, currency)) %>%
dplyr::select(calendar) %>%
as.character
View(swap.tabular)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.tabular
View(swap.tabular)
View(swap.tabular)
View(swap.tabular)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
Swaps_basket
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.portfolio)
swap.portfolio
swap.portfolio %<>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose() %>%
purrr::set_names(purrr::map(., "ID"))
swap.portfolio
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio %<>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose()
swap.portfolio
map(swap.portfolio, mutate_at(vars(start.date), as.Date))
map(swap.portfolio, ~mutate_at(., vars(start.date), as.Date))
modify_at(swap.portfolio, "start.date", as.Date)
purrr::modify_at(swap.portfolio, "start.date", as.Date)
as.Date(25347)
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h")
)
df
df %>%
transform(y = strsplit(y, ","))
unnest(df)
Swaps_basket
Swaps_basket %>% mutate_at(vars(start.date, maturity.date), as.character)
use_data(Swaps_basket)
use_data(Swaps_basket, overwrite = TRUE)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio %<>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose()
swap.portfolio %<>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::transpose()
swap.portfolio
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.portfolio %>%
# insert a control on how to manage non European dates
# dplyr::mutate_at(.vars = dplyr::vars(start.date, maturity.date),
#                  .funs = lubridate::dmy) %>%
purrr::pmap(list)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(cashflows)
swap.dates
df.table
df.table
switch(swap$type$pay,
"fixed" = swap.dates$pay$cashflows,
"floating" = swap.dates$receive$cashflows) %>%
dplyr::mutate(df = approx(df.table$t2m, log(df.table$df), .$yf) %>%
purrr::pluck("y") %>%
exp)
swap$type
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap
swap
swap$type
swap$type$pay
swap$type
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.par.pricing)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
swap.dates %>%
purrr::pluck("accrual.yf")
swap$notional
rate
swap$type
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
leg.type
switch(leg.type, "pay" = -1, "receive" = 1)
swap.dates %>%
purrr::pluck("accrual.yf") %>%
`*`(swap$notional * rate * switch(leg.type, "pay" = -1, "receive" = 1))
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
View(swap.portfolio)
swap.portfolio %>%
purrr::map_df(~SwapPricing(today, .x, df.table))
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
names(swap.portfolio)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer::Swaps_basket, today, df.table)
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing(Swaps_basket, lubridate::ymd(20190414), df.table)})
?Quandl
Quandl::Quandl("BOF/QS_D_IEUTIO6M", start_date = "2013-01-01", end_date = "2013-01-01")
Quandl::Quandl("BOF/QS_D_IEUTIO6M", start_date = "2017-01-01", end_date = "2017-01-01")
Quandl::Quandl("BOF/QS_D_IEUTIO6M")
Quandl::Quandl("BOF/QS_D_IEUTIO6M", start_date = "2019-05-07", end_date = "2019-05-07")
