swap.portfolio %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$start.date,
.data$maturity.date),
.funs = lubridate::dmy) %>%
purrr::pmap(list) %>% {purrr::map(.,.$ID)}
swap.portfolio %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$start.date,
.data$maturity.date),
.funs = lubridate::dmy) %>%
purrr::pmap(list) %>% {purrr::map(.,"ID")}
swap.portfolio %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$start.date,
.data$maturity.date),
.funs = lubridate::dmy) %>%
purrr::pmap(list) %>% purrr::set_names({purrr::map(.data,"ID")}
)
swap.portfolio %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$start.date,
.data$maturity.date),
.funs = lubridate::dmy) %>%
purrr::pmap(list) %>% purrr::set_names(~{purrr::map(.data,"ID")})
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
?purrr::set_names
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
purrr::map_chr(swap.portfolio, "ID")
purrr::map(swap.portfolio, "ID")
swap.portfolio
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.portfolio$id
swap.portfolio
swap.portfolio$ID
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.standard %>%
{.data[grepl(swap.tabular$currency, .data$currency) &
grepl(swap.leg, .data$leg),]}
swap.standard %>%{.data[grepl(swap.tabular$currency, .data$currency) & grepl(swap.leg, .data$leg),]}
swap.standard %>%{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg),]}
swap.standard %>%{.[grepl(swap.tabular$currency, .data$currency) & grepl(swap.leg, .data$leg),]}
swap.standard %>%{.data[grepl(swap.tabular$currency, .data$currency) & grepl(swap.leg, .data$leg),]}
swap.standard %>% .data[grepl(swap.tabular$currency, .data$currency),]}
swap.standard %>% .data[grepl(swap.tabular$currency, .data$currency),]
swap.standard %>% {.data[grepl(swap.tabular$currency, .data$currency),]}
swap.standard %>% {.[grepl(swap.tabular$currency, .$currency),]}
swap.standard %>% {.[grepl(swap.tabular$currency, .data$currency),]}
swap.standard %>% {.data[grepl(swap.tabular$currency, .$currency),]}
swap.standard %>% subset(grepl(swap.tabular$currency, .data$currency))
swap.standard %>% subset(grepl(swap.tabular$currency, .$currency))
swap.standard %>% subset(grepl(swap.tabular$currency, .data[currency]))
swap.standard %>% .[["currency"]]
swap.standard %>% .["currency"]
swap.standard %>% .data["currency"]
subset(swap.standard, grepl(swap.tabular$currency, currency))
swap.standard %>%
{.data[grepl(swap.tabular$currency, .currency) &
grepl(swap.leg, .leg),]}
swap.standard %>%
{.data[grepl(swap.tabular$currency, currency) &
grepl(swap.leg, leg),]}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(swap.leg, leg)) %>%
.data[[variable]]
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(swap.leg, leg))
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(swap.leg, leg))[[variable]]
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable))
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(as.character(swap.tabular$type[leg]), leg))[[variable]]
swap.standard
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(as.character(swap.tabular$type[leg]), leg))
as.character(swap.tabular$type[leg])
subset(swap.standard, grepl(swap.tabular$currency, currency))
subset(swap.standard, grepl(as.character(swap.tabular$type[leg]), leg))
as.character(swap.tabular$type[leg])
A <- as.character(swap.tabular$type[leg])
subset(swap.standard, grepl(A, leg))
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(leg.contract, leg))
subset(swap.standard, grepl(swap.tabular$currency, currency) &
grepl(leg.contract, leg))[[variable]]
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable))
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.data)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.data)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
{purrr::transpose(.data)}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(currency)) &
grepl(leg.contract, leg))[[variable]]
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(currency)))
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(!!currency)))
subset(swap.standard, grepl(swap.tabular$currency, currency))
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(!!!currency)))
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(!currency)))
subset(swap.standard, grepl(swap.tabular$currency, rlang::quo(!!currency)))
?subset
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.standard[grepl(swap.tabular$currency, swap.standard$currency]
swap.standard[grepl(swap.tabular$currency, swap.standard$currency)]
swap.standard[grepl(swap.tabular$currency, swap.standard$currency) & grepl(leg.contract, swap.standard$leg)]
leg.contract
swap.standard[grepl(swap.tabular$currency, swap.standard$currency) & grepl(leg.contract, swap.standard$leg),]
swap.standard[grepl(swap.tabular$currency, swap.standard$currency) & grepl(leg.contract, swap.standard$leg),][[variable]]
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable))
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.) %>%
purrr::flatten(.)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable)) %>%
purrr::transpose(.) %>%
purrr::flatten(.)
list(pay = GetStandard(swap.tabular, "pay", variable),
receive = GetStandard(swap.tabular, "receive", variable))
?elseif
devtools::document()
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.standard
type
swap.standard[grepl("floating", swap.standard$leg),
variable]
swap.standard[grepl("fixed",
swap.standard$leg),variable]
View(convention)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.tabular
View(swap.tabular)
swap.tabular$dcc
swap.tabular$dcc$pay
swap.tabular %>%
purrr::discard(stringr::str_detect(names(.data),
"pay|receive|standard|ID") == TRUE)
View(swap.tabular)
swap.tabular %>%
purrr::discard(stringr::str_detect(names(.),
"pay|receive|standard|ID") == TRUE)
A <- swap.tabular %>%
purrr::discard(stringr::str_detect(names(.),
"pay|receive|standard|ID") == TRUE)
?discard
A <- swap.tabular %>%
{purrr::discard(.data, stringr::str_detect(names(.),
"pay|receive|standard|ID") == TRUE)}
A <- swap.tabular %>%
{purrr::discard(.data, stringr::str_detect(names(.data),
"pay|receive|standard|ID") == TRUE)}
A <- swap.tabular %>%
{purrr::discard(.data, stringr::str_detect(names(.),
"pay|receive|standard|ID") == TRUE)}
A <- swap.tabular %>%
names(.data)
A <- swap.tabular %>%
names
A <- swap.tabular %>%
names(.data)
A <- swap.tabular %>%
{names(.data)}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.tabular %<>%
{purrr::discard(.data, stringr::str_detect(names(.data),
"pay|receive|standard|ID") == TRUE)}
View(swap.tabular)
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.tabular %>%
purrr::discard(stringr::str_detect(swap.tabular %>% names,
"pay|receive|standard|ID") == TRUE)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.tabular %<>%
purrr::discard(stringr::str_detect(swap.tabular %>% names,
"pay|receive|standard|ID") == TRUE)
devtools::document()
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
swap.portfolio %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$start.date,
.data$maturity.date),
.funs = lubridate::dmy) %>%
purrr::pmap(list) %>%
purrr::set_names(swap.portfolio$ID)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows  %>%
{fmdates::year_frac(today, .data, dcc)}
cashflows  %>%
{fmdates::year_frac(today, ., dcc)}
cashflows
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date()
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, .data) else .data}
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, .data)}
.data
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, .)}
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, rlang::quo(.data)}
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, .)}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows
today
?append
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows
start.date < today
append(cashflows, today)
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows
accrual.date %>%
{RQuantLib::advance(calendar = calendar,
dates = .data,
n = -2,
timeUnit = 0,
bdc = 1,
emr = TRUE)}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
accrual.date
time.unit
accrual.date
type
fixing.date
accrual.date
today
fmdates::year_frac(today, cashflows, dcc)
fmdates::year_frac(today, cashflows, dcc) %>%
{tibble::tibble(yf = .data[.data >= 0])}
fmdates::year_frac(today, cashflows, dcc) %>%
{tibble::tibble(yf = .[. >= 0])}
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten(.data) %>%
{do.call("c", .data)} %>%
unname
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten() %>% do.call("c")
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten() %>% do.call("c", .)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten()
A <- cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten()
unlist(A, use.names = FALSE)
A <- cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten_dbl()
A <- cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten_raw()
A <- cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten()
A <- cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten() %>% purrr::flatten()
View(A)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>% purrr::flatten()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
{do.call("c", .)}
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
{do.call("c", .)} %>% unname
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
{do.call("c", .data)} %>% unname
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::rbind()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::rbind_list()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::bind_rows()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::bind_cols()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::bind_cols() %>% as.vector()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>%
dplyr::bind_cols() %>% min()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>% apply("c")
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>% apply(1,"c")
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>% apply(1,c)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>% cbind()
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten() %>% rbind()
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact)
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten
cashflows %>%
purrr::map_depth(2, "fixing.date") %>%
purrr::map(purrr::compact) %>%
purrr::flatten()
library(SwapPricer)
devtools::document()
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
fixing.dates
floating.history[floating.history$Date %in% swap.dates$fixing.date,]
fixing.row <- floating.history[floating.history$Date %in% swap.dates$fixing.date,]
library(SwapPricer)
SwapPortfolioPricing(swap.basket, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)
library(SwapPricer)
SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)
SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)
fixing.dates
A <- SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)
View(A)
profvis::profvis({SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)})
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)})
devtools::document()
usethis::use_tidy_eval()
devtools::document()
library(SwapPricer)
SwapPortfolioPricing(SwapPricer:::realworld.portfolio, lubridate::ymd(20190414), df.table)
load("~/Documents/R/Pricingverse/SwapPricer/.RData")
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
closest.dates
floating.history[which(closest.dates ==
closest.dates[closest.dates < 0]),]
closest.dates ==
closest.dates[closest.dates < 0]
closest.dates[closest.dates < 0]
closest.dates
max(closest.dates[closest.dates < 0])
which(closest.dates == max(closest.dates[closest.dates < 0])
)
floating.history[which(closest.dates == max(closest.dates[closest.dates < 0])),]
swap.dates$fixing.date
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
profvis::profvis({SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)})
usethis::use_mit_license()
usethis::use_mit_license()
options(usethis.full_name = "My name")
options(usethis.full_name = "Davide Magno")
usethis::use_mit_license()
