#                  to = (lubridate::year(maturity.date) -
#                          lubridate::year(start.date)) * 12,
#                  by = time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
(seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit
start.date
(seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit %>%
# cashflows <- seq(from = 0,
#                  to = (lubridate::year(maturity.date) -
#                          lubridate::year(start.date)) * 12,
#                  by = time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
seq(from = 0,to = (lubridate::year(maturity.date) -lubridate::year(start.date)) * 12,by = time.unit)
seq(from = 0,to = (lubridate::year(maturity.date) -lubridate::year(start.date)) * 12,by = time.unit) %>% purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
A <- (seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit
B <- seq(from = 0,to = (lubridate::year(maturity.date) -lubridate::year(start.date)) * 12,by = time.unit)
A == B
A %>% purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
B %>% purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
(seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
(seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit
(seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit %>% as.list %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
A <- (seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit
A %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE))
((seq_len((m - s) * (12/time.unit) + 1) - 1) * time.unit) %>%
purrr::map_dbl(~RQuantLib::advance(calendar = calendar,
dates = start.date,
n = .x,
timeUnit = 2,
bdc = 1,
emr = TRUE)) %>%
lubridate::as_date() %>%
{if (start.date < today) append(today, .) else .}
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
advance <- c(0,6,12)
RQuantLib::advance(dates = Sys.Date(), n = advance)
RQuantLib::advance(dates = Sys.Date(), n = advance, timeUnit = 2)
map_dbl(advance, RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2)
)
map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))
A <- map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))
RQuantLib::yearFraction(today, A, dcc)
RQuantLib::yearFraction(Sys.Date(), A, 0)
advance <- ((seq_len((100) * (12/time.unit) + 1) - 1) * time.unit)
advance <- ((seq_len((100) * (12/3) + 1) - 1) * 3)
install.packages("microbenchmark")
?apply
?vapply
vapply(advance, RQuantLib::advance, c(dates = Sys.Date(), timeUnit = 2))
vapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(),
timeUnit = 2, n = x))
lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(),
timeUnit = 2, n = x))
mapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(),
timeUnit = 2, n = x))
lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(), timeUnit = 2, n = x)) %>% as.vector
lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(), timeUnit = 2, n = x)) %>% unlist
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance,
~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
"Apply" = {lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(),
timeUnit = 2, n = x)) %>%
unlist}
)
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance,
~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
"Apply" = {lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(),
timeUnit = 2, n = x)) %>%
unlist}
)
install.packages("fmdates")
effective_date <- ymd('20120103')
termination_date <- ymd('20121203')
effective_date <- lubridate::ymd('20120103')
termination_date <- lubridate::ymd('20121203')
tenor <- lubridate::months(3)
tenor <- months(3)
bdc <- 'mf'
calendar <- fmdates::EUTACalendar()
View(calendar)
eom_rule <- TRUE
?fmdates::generate_schedule
generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, eom_rule)
fmdates::generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, eom_rule)
stub <- 'short_front'
fmdates::generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, eom_rule)
fmdates::generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, eom_rule, stub)
library (lubridate)
effective_date <- ymd('20120103')
termination_date <- ymd('20121203')
tenor <- months(3)
stub <- 'short_front'
bdc <- 'mf'
calendar <- AUSYCalendar()
eom_rule <- FALSE
library(fmdates)
calendar <- AUSYCalendar()
eom_rule <- FALSE
generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, stub, eom_rule)
calendar <- AUSYCalendar()
eom_rule <- FALSE
A <- generate_schedule(effective_date, termination_date, tenor, calendar,
bdc, stub, eom_rule)
A %>% as.Date()
max(advance)
1200/12
A %>% lubridate::int_start
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
"Apply" = {lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(), timeUnit = 2, n = x)) %>%
unlist},
"FMDates" = {generate_schedule(ymd('20120103'), ymd('20120103'), months(3), AUSYCalendar(),
'mf', 'short_front', TRUE)}
)
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
"Apply" = {lapply(advance, function(x) RQuantLib::advance(dates = Sys.Date(), timeUnit = 2, n = x)) %>%
unlist},
"FMDates" = {generate_schedule(ymd('20120103'), ymd('21120103'), months(3), AUSYCalendar(),
'mf', 'short_front', TRUE)}
)
B <- generate_schedule(ymd('20120103'), ymd('21120103'), months(3), AUSYCalendar(),
'mf', 'short_front', TRUE)
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
"FMDates" = {generate_schedule(ymd('20120103'), ymd('21120103'), months(3), AUSYCalendar(),
'mf', 'short_front', TRUE)}
)
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))},
# "FMDates" = {generate_schedule(ymd('20120103'), ymd('20620103'), months(3), AUSYCalendar(),
#                                'mf', 'short_front', TRUE)}
)
microbenchmark::microbenchmark(
"Map" = {map_dbl(advance, ~RQuantLib::advance(dates = Sys.Date(), n = .x, timeUnit = 2))}
# "FMDates" = {generate_schedule(ymd('20120103'), ymd('20620103'), months(3), AUSYCalendar(),
#                                'mf', 'short_front', TRUE)}
)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
swap.tabular$currency
currency
swap.tabular
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
dplyr::filter(data, grepl(swap.tabular$currency, .$currency),
grepl(swap.leg, .$leg))
dplyr::filter(data, grepl(swap.tabular$currency,data$currency))
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
dplyr::filter(data, grepl(swap.tabular$currency, data$currency),
grepl(swap.leg, data$leg))
variable
data[[variable]]
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
grepl(swap.tabular$currency, SwapPricer::swap.standard$currency)
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
test
SwapPricer::swap.standard.calendar %>%
dplyr::filter(test)
SwapPricer::swap.standard.calendar %>%
dplyr::filter(test) %>%
dplyr::select(calendar)
SwapPricer::swap.standard.calendar %>%
dplyr::filter(test) %>%
dplyr::select(calendar) %>%
as.character
library(SwapPricer)
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
profvis::profvis({SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)})
SwapPortfolioPricing2(DEU_TG, lubridate::ymd(20190604), DF_TG)
devtools::document()
library(SwapPricer)
Swaps_basket
library(dplyr)
write.csv(Swaps_basket)
?write_csv
write.csv(Swaps_basket, here::here)
write.csv(Swaps_basket, here::here())
tmp <- tempfile()
write.csv(Swaps_basket, tmp)
head(read_csv(tmp))
tempfile()
write.csv(Swaps_basket, here::here("test.csv"))
library(readr)
swap_basket <- read_csv("test.csv")
View(swap_basket)
usethis::use_data(swap_basket)
str_sub("prova",1,1)
stringr::str_sub("prova",1,1)
grepl(r,"R")
grepl("r","R")
library(SwapPricer)
swap_basket
SwapPortfolioPricing(swap_basket, lubridate::ymd(20190401), DF_TG)
dplyr::case_when(
grepl("P|p", test) ~ list(pay = "fixed",receive = "floating"),
grepl("R|r", test) ~ list(pay = "fixed",receive = "floating")
)
?case_when
swap.tabular %>% mutate(type = dplyr::case_when(
grepl("P|p", test) ~ list(pay = "fixed",receive = "floating"),
grepl("R|r", test) ~ list(pay = "fixed",receive = "floating")
))
swap.tabular$type <- dplyr::case_when(
grepl("P|p", test) ~ list(pay = "fixed",receive = "floating"),
grepl("R|r", test) ~ list(pay = "fixed",receive = "floating")
))
swap.tabular$type <- dplyr::case_when(
grepl("P|p", test) ~ list(pay = "fixed",receive = "floating"),
grepl("R|r", test) ~ list(pay = "fixed",receive = "floating")
)
View(swap.tabular)
library(SwapPricer)
SwapPortfolioPricing(swap_basket, lubridate::ymd(20190401), DF_TG)
switch(stringr::str_sub(swap.tabular$type,1,1),
"P|p" = list(pay = "fixed", receive = "floating"),
"R|r" = list(pay = "floating", receive = "fixed")
)
swap.tabular$type <- switch(stringr::str_sub(swap.tabular$type,1,1),
"P|p" = list(pay = "fixed", receive = "floating"),
"R|r" = list(pay = "floating", receive = "fixed")
)
View(swap.tabular)
View(swap.tabular)
?switch
library(SwapPricer)
SwapPortfolioPricing(swap_basket, lubridate::ymd(20190401), DF_TG)
View(swap.tabular)
SwapPricer::swap.standard.calendar
A <- SwapPricer::swap.standard.calendar
A <- SwapPricer::swap.standard
View(A)
A[currency == "EUR"]
library(data.table)
install.packages("data.table")
library(data.table)
A %>% as.data.table
A %>% as.data.table %>% .[currency == "EUR"]
A %>% as.data.table %>% .[currency == "EUR", leg == "fixed"]
A %>% as.data.table %>% .[currency == "EUR" & leg == "fixed"]
A %>% as.data.table %>% .[currency == "EUR" & leg == "fixed"] %>% dplyr::select(time.unit)
swap.standard <- SwapPricer::swap.standard %>% as.data.table
swap.standard.calendar <- SwapPricer::swap.standard.calendar %>% as.data.table
usethis::use_data(swap.standard)
usethis::use_data(swap.standard, overwrite = TRUE)
usethis::use_data(swap.standard.calendar, overwrite = TRUE)
library(SwapPricer)
SwapPortfolioPricing(swap_basket, lubridate::ymd(20190401), DF_TG)
SwapPricer::swap.standard %>%
.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]
swap.tabular$currency
SwapPricer::swap.standard$currency
grepl(swap.tabular$currency, SwapPricer::$currency)
grepl(swap.tabular$currency, SwapPricer::swap.standard$currency$currency)
grepl(swap.tabular$currency, SwapPricer::swap.standard$currency)
SwapPricer::swap.standard[grepl(swap.tabular$currency, SwapPricer::swap.standard$currency)]
SwapPricer::swap.standard %>% {.[grepl(swap.tabular$currency, .$currency)]}
SwapPricer::swap.standard %>% {.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]}
SwapPricer::swap.standard %>% {.[grepl(swap.leg, .$leg)]}
swap.leg
leg
swap.tabular
swap.tabular$type["pay"]
swap.tabular$type["pay"] %>% as.character
library(SwapPricer)
SwapPortfolioPricing(swap_basket, lubridate::ymd(20190401), DF_TG)
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]}
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]} %>%
# dplyr::filter(grepl(swap.tabular$currency, .$currency),
#                     grepl(swap.leg, .$leg)) %>%
.[[variable]]
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]} %>%
# dplyr::filter(grepl(swap.tabular$currency, .$currency),
#                     grepl(swap.leg, .$leg)) %>%
.[variable]
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]} %>%
# dplyr::filter(grepl(swap.tabular$currency, .$currency),
#                     grepl(swap.leg, .$leg)) %>%
{.[[variable]]}
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]}
SwapPricer::swap.standard
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg)]}
DT <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = 1:9,
V3 = c(0.5, 1.0, 1.5),
V4 = rep(LETTERS[1:3], 3))
class(DT)
DT
DT[V1 == 1 & V4 == "A"]
DT
class(DT)
DT[V1 == 1]
DT[3:4]
DT[3:4,]
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg),]}
SwapPricer::swap.standard %>%
{.[grepl(swap.tabular$currency, .$currency) & grepl(swap.leg, .$leg),]} %>%
# dplyr::filter(grepl(swap.tabular$currency, .$currency),
#                     grepl(swap.leg, .$leg)) %>%
.[[variable]]
library(SwapPricer)
View(DEU_TG)
library(readr)
DEU_TG <- read_csv("data/DEU TG.csv")
View(DEU_TG)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
View(DEU_TG)
min(DEU_TG$maturity.date)
min(DEU_TG$start.date)
View(DEU_TG)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
maturity.date
View(DEU_TG)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
profvis::profvis({SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
swap.tabular
leg
variable
library(SwapPricer)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
SwapPricer::swap.standard.calendar %>%
{.[grepl(swap.tabular$currency, .$currency),]}
SwapPricer::swap.standard.calendar %>%
{.[grepl(swap.tabular$currency, .$currency),]} %>%
.[["calendar"]]
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
profvis::profvis({SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)})
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
floating.history %>%
data.table::as.data.table(.)
floating.history %>%
data.table::as.data.table(.) %>%
{.[Date == swap.dates$fixing.date,]}
swap.dates$fixing.date
floating.history %>%
data.table::as.data.table(.) %>%
.[Date = swap.dates$fixing.date,]
floating.history %>%
data.table::as.data.table(.) %>%
{.[Date = swap.dates$fixing.date,]}
floating.history %>%
data.table::as.data.table(.) %>%
{.[Date = swap.dates$fixing.date]}
floating.history %>%
data.table::as.data.table(.) %>%
{.[Date == swap.dates$fixing.date]}
floating.history %>%
data.table::as.data.table(.)
floating.history %>%
data.table::as.data.table(.) %>%
{.[swap.dates$fixing.date %in% Dates,]}
usethis::use_package("data.table")
library(SwapPricer)
devtools::document()
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
floating.history %>%
data.table::as.data.table(.) %>%
{.[Date == swap.dates$fixing.date,]}
floating.history %<>%
data.table::as.data.table(.)
str(floating.history)
floating.history[Date == as.Date(swap.dates$fixing.date)]
floating.history[,Date]
floating.history[,1]
names(floating.history)
floating.history[,"Date"]
floating.history[1,]
floating.history[1,"Date"]
floating.history[1,"Value"]
floating.history[1,"Value"]/100
floating.history[Date %in% "2019-05-30","Value"]/100
View(floating.history)
subset(floating.history, Date %in% swap.dates$fixing.date)
floating.history %>%
data.table::as.data.table(.) %>%
subset(Date %in% swap.dates$fixing.date) %>%
.[["Value"]]
floating.history %>%
data.table::as.data.table(.) %>%
subset(Date %in% swap.dates$fixing.date) %>%
.[["Value"]]/100
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
floating.history %>%
data.table::as.data.table(.) %>%
subset(Date %in% swap.dates$fixing.date)
floating.history %>%
data.table::as.data.table(.) %>%
subset(Date %in% swap.dates$fixing.date) %>%
.[["Value"]]/100
library(SwapPricer)
SwapPortfolioPricing(DEU_TG, lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,5), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,100), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,300), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,500), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,700), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,600), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,650), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,675), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,670), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,660), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,655), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,657), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(head(DEU_TG,658), lubridate::ymd(20190604), DF_TG)
SwapPortfolioPricing(DEU_TG[659,], lubridate::ymd(20190604), DF_TG)
DEU_TG[659,]
library(SwapPricer)
